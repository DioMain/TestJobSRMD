@using TestJobSRMD.Entity.Models;

@{
    ViewData["Title"] = "Contact Page";
}

<div class="m-1">
    <div style="height: 630px; overflow-y: auto; padding: 4px"> 
        <div class="container text-center">
            <div class="row">
                <div class="col col-lg-3">
                    GUID
                </div>
                <div class="col">
                    Name
                </div>
                <div class="col">
                    Mobile phone
                </div>
                <div class="col">
                    Job title
                </div>
                <div class="col">
                    Birth Date
                </div>
            </div>
            @foreach (Contact contact in Model)
            {
                <div class="row contact-item" onclick="select('@contact.Id')">
                    <div class="col text-start col-lg-3">
                        @contact.Id
                    </div>
                    <div class="col">
                        @contact.Name
                    </div>
                    <div class="col">
                        @contact.MobilePhone
                    </div>
                    <div class="col">
                        @contact.JobTitle
                    </div>
                    <div class="col">
                        @contact.BirthDate.ToShortDateString()
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="d-flex flex-row justify-content-between">
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#editModal" onclick="create()">Create</button>

        <div id="edit" class="flex-row" style="display: none">
            <div id="itemGuid" style="margin-right: 8px; vertical-align: middle;"></div>

            <div>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editModal" onclick="edit()">Update</button>
                <button class="btn btn-danger" onclick="deleteContact()">Delete</button>
            </div>
        </div>
    </div>

    <!--Popup-->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="contactModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="contactModalLabel">Contact creation/Edit</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex flex-column" style="gap: 16px;">
                    <label>
                        Name
                        <input class="form-control" id="inputName" />
                    </label>
                    <label>
                        Mobile phone
                        <input class="form-control" id="inputPhone" />
                    </label>
                    <label>
                        Job title
                        <input class="form-control" id="inputJob" />
                    </label>
                    <label>
                        Birthdate
                        <input type="date" class="form-control" id="inputBirthdate" />
                    </label>
                </div>
                <div id="errField" class="text-danger"></div>
                <div class="modal-footer text-center">
                    <button type="button" class="btn btn-primary" onclick="send()">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let selected = "";
        let modalMode = 0; // 0 - create, 1 - edit

        function select(guid) {
            selected = guid;
            itemGuid.innerHTML = `SELECTED: ${guid}`;

            $("#edit").css("display", "flex");

            console.log(guid);
        }

        function create() {
            $("#contactModalLabel").text(`Concact create`);
            modalMode = 0;

            $("#errField").text("");

            $("#inputName").val("");
            $("#inputPhone").val("");
            $("#inputJob").val("");
            $("#inputBirthdate").val("");
        }

        function edit() {
            $("#contactModalLabel").text(`Concact edit`);
            modalMode = 1;

            $("#errField").text("");

            fetch(`/Home/GetContact?id=${selected}`, {
                method: "GET",
            })
            .then(raw => raw.json())
            .then(contact => {
                console.log(contact);
                $("#inputName").val(contact.name);
                $("#inputPhone").val(contact.mobilePhone);
                $("#inputJob").val(contact.jobTitle);
                $("#inputBirthdate").val(contact.birthDate.split("T")[0]);
            });
        }

        function deleteContact() {
            fetch(`/Home/DeleteContact?id=${selected}`, {
                method: 'DELETE'
            })
            .then(raw => raw.text())
            .then(text => {
                window.location.reload();
            });
        }

        function send() {
            const Name = $("#inputName").val();
            const Phone = $("#inputPhone").val();
            const JobTitle = $("#inputJob").val();
            const Birthdate = $("#inputBirthdate").val();

            const phoneRegex = /^(\+?\d{1,3}[\s-]?)?(\(\d{1,4}\)|\d{1,4})[\s-]?\d{1,4}[\s-]?\d{1,9}$/;

            if (Name === "") {
                $("#errField").text("Name field is empty!");

                return;
            }

            if (Phone === "") {
                $("#errField").text("Phone field is empty!");

                return;
            }

            if (!phoneRegex.test(Phone)) {
                $("#errField").text("Incorrect phone!");

                return;
            }

            if (JobTitle === "") {
                $("#errField").text("JobTitle field is empty!");

                return;
            }

            if (Birthdate === "") {
                $("#errField").text("Birthdate field is empty!");

                return;
            }

            let date = new Date(Birthdate);
            let nowDate = new Date();

            if (date > nowDate) {
                $("#errField").text("Incorrect Birthdate!");

                return;
            }

            if (modalMode == 0) {
                fetch(`/Home/CreateContact`, {
                    method: 'POST',
                    headers: {
                        "content-type": "application/json"
                    },
                    body: JSON.stringify({
                        Name: Name,
                        MobilePhone: Phone,
                        JobTitle: JobTitle,
                        Birthdate: Birthdate
                    })
                })
                .then(raw => raw.text())
                .then(text => {
                    window.location.reload();
                });
            }
            else {
                fetch(`/Home/UpdateContact?id=${selected}`, {
                    method: 'PUT',
                    headers: {
                        "content-type": "application/json"
                    },
                    body: JSON.stringify({
                        Name: Name,
                        MobilePhone: Phone,
                        JobTitle: JobTitle,
                        Birthdate: Birthdate
                    })
                })
                .then(raw => raw.text())
                .then(text => {
                    window.location.reload();
                });
            }
        }
    </script>
</div>
